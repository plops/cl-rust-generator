
* Raymarching
- https://www.youtube.com/watch?v=Ff0jJyyiVyw&t=916s
- https://www.youtube.com/watch?v=PGtv-dBi2wE&t=243s
- sdf of box https://www.youtube.com/watch?v=62-pRVZuS5c
- sdf of line https://www.youtube.com/watch?v=PMltMdi1Wzg
- sphere gears https://www.youtube.com/watch?v=bdICU2uvOdU

* Misc

- draw quad with a single triangle
https://www.saschawillems.de/blog/2016/08/13/vulkan-tutorial-on-rendering-a-fullscreen-quad-without-buffers/


- load shader at runtime (vulkano)
https://github.com/vulkano-rs/vulkano-examples/blob/master/src/bin/runtime-shader/main.rs
https://github.com/vulkano-rs/vulkano-examples/blob/1cf9c37073a79a3a0cee60e83c8db8d967218e3e/src/bin/runtime-shader/main.rs

- load shader at runtime (not vulkano but shows use of notify)
https://stackoverflow.com/questions/53092022/is-it-possible-to-compile-a-vulkano-shader-at-runtime

- vulkano render engine
https://github.com/cynic64/render-engine


- rust on android
https://mozilla.github.io/firefox-browser-architecture/experiments/2017-09-21-rust-on-android.html


- alternative rust bindings for vulkan
https://github.com/MaikKlein/ash

- raytracing
https://github.com/gwihlidal/ash-nv-rt

- look at expanded macros
#+begin_example
cargo install cargo-expand
cargo expand
#+end_example

#+begin_example
                   65592u32,
                    ];
                    unsafe {
                        Ok(Shader {
                            shader: ::vulkano::pipeline::shader::ShaderModule::from_words(
                                device, &words,
                            )?,
                        })
                    }
                }
                #[doc = r" Returns the module that was created."]
                #[allow(dead_code)]
                #[inline]
                pub fn module(
                    &self,
                ) -> &::std::sync::Arc<::vulkano::pipeline::shader::ShaderModule> {
                    &self.shader
                }
                #[doc = r" Returns a logical struct describing the entry point named `{ep_name}`."]
                #[inline]
                #[allow(unsafe_code)]
                pub fn main_entry_point(
                    &self,
                ) -> ::vulkano::pipeline::shader::GraphicsEntryPoint<
                    (),
                    MainInput,
                    MainOutput,
                    Layout,
                > {
                    unsafe {
                        #[allow(dead_code)]
                        static NAME: [u8; 5usize] = [109u8, 97u8, 105u8, 110u8, 0];
                        self.shader.graphics_entry_point(
                            ::std::ffi::CStr::from_ptr(NAME.as_ptr() as *const _),
                            MainInput,
                            MainOutput,
                            Layout(ShaderStages {
                                fragment: true,
                                ..ShaderStages::none()
                            }),
                            ::vulkano::pipeline::shader::GraphicsShaderType::Fragment,
                        )
                    }
                }
            }
            pub struct MainInput;
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::fmt::Debug for MainInput {
                fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                    match *self {
                        MainInput => {
                            let mut debug_trait_builder = f.debug_tuple("MainInput");
                            debug_trait_builder.finish()
                        }
                    }
                }
            }
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::marker::Copy for MainInput {}
            #[automatically_derived]
            #[allow(unused_qualifications)]
            impl ::core::clone::Clone for MainInput {
                #[inline]
                fn clone(&self) -> MainInput {
                    {
                        *self
                    }
                }
            }
#+end_example


* OutOfHostMemory crash is known on nvidia
- https://github.com/vulkano-rs/vulkano/issues/1247
- https://github.com/vulkano-rs/vulkano/issues/923
  - PresentMode::Immediate instead of Fifo should work

* vkQueuePresentKHR: Presenting image without calling vkGetPhysicalDeviceSurfaceSupportKHR

- is this bad?
- https://github.com/KhronosGroup/Vulkan-ValidationLayers/issues/1282
#+begin_example
Platform-specific versions of the present-support function do not check for surface compatibility, hence the warning. https://vulkan.lunarg.com/doc/view/1.0.33.0/linux/vkspec.chunked/ch29s04.html: "Not all physical devices will include WSI support. Within a physical device, not all queue families will support presentation. WSI support and compatibility can be determined in a platform-neutral manner (which determines support for presentation to a particular surface object) and additionally may be determined in platform-specific manners (which determine support for presentation on the specified physical device but do not guarantee support for presentation to a particular surface object)."
#+end_example
